{"version":3,"sources":["utilities/inputUtilities.js","utilities/dateTimeFormatter.js","components/MultiDayPicker.js","components/ColorPicker.js","data/daysOfWeek.js","components/AddToTemplateModal.js","components/GenericModal.js","components/WelcomeGuide.js","data/googleColors.js","components/Planner.js","serviceWorker.js","index.js"],"names":["handleInputChanges","event","name","target","val","value","this","setState","Object","defineProperty","formatToTimeString","time","moment","format","MultiDayPicker","state","selectedDays","dayToggle","e","_this","checked","getSelectedDays","props","listOfDays","forEach","day","push","id","setDay","index","parseInt","selectedDay","renderDayButton","react_default","a","createElement","Fragment","key","type","onChange","className","htmlFor","letter","prevProps","prevState","daysOfWeek","sendSelectedDays","dayOfWeek","_this2","reactstrap_es","style","paddingTop","paddingBottom","map","valid","position","top","Component","ColorPicker","_ref","colorList","selectedColor","defaultColor","setSelectedColor","marginTop","caret","backgroundColor","modifiers","setMaxHeight","enabled","order","fn","data","objectSpread","styles","overflow","maxHeight","color","height","marginBottom","onClick","populateColors","short","AddToTemplateModal","inEditMode","colorTypeId","headerTextColor","defaultBgColor","modalHeaderColor","title","addEventTitle","startDate","startTime","endTime","validation","pickedADay","pleasePickADay","populateDaysBox","setSelectedDays","length","validateInputs","getFormData","handleSubmission","sendUpdatedEvent","selectedEvent","newEvents","sendEventToCalendar","original","resetValues","showUpdatedEvent","closeHandler","onClose","updateInputValue","bind","assertThisInitialized","updateModalBgColor","handleDayChange","add","insertDeleteButton","delete","colorIndex","setNewEventTime","start","end","checkSelectedEvent","_this$props$selectedE","renderDayPicker","components_MultiDayPicker","_this$state","Number","isInteger","allValid","modalOpen","maxWidth","minWidth","isOpen","toggle","modalTransition","timeout","backdropTransition","width","float","invalid","components_ColorPicker","googleColors","es","selected","showTimeSelect","showTimeSelectOnly","timeIntervals","minTime","maxTime","dateFormat","concat","GenericModal","size","children","Guide","DragAndDropCalendar","withDragAndDrop","Calendar","localizer","momentLocalizer","colorTypes","_step","colorKeys","keys","filter","_iterator","_createForOfIteratorHelper","_loop","colorData","s","n","done","err","f","App","events","quickCreateModal","newStartTime","newEndTime","showWelcomeModal","checkIfNewVisitor","localStorage","getItem","setItem","loadSavedEvents","savedData","JSON","parse","ev","reformatEventData","updateCalendarFromQuickCreate","newEventsArr","toConsumableArray","reduceEventData","saveEventsToLocal","stringified","stringify","bgColor","Date","closeModalHandler","quickRemoveFromCalendar","onEventMoveResize","_ref2","console","log","endDateTime","hours","minutes","toDate","prepareMovedEventForUpdate","newStart","newEnd","updatedEvent","renderMovedEvent","renderUpdatedEvent","reformatted","remaining","setEventCellStyling","background","substring","onCalendarEventSelection","calendarSelectionHandler","slotInfo","newEventStart","newEventEnd","closeModal","lineHeight","borderRadius","margin","bottom","selectable","defaultDate","defaultView","views","step","timeslots","toolbar","min","formats","dayFormat","date","culture","timeGutterFormat","onEventDrop","onEventResize","eventPropGetter","onSelectEvent","onSelectSlot","components_AddToTemplateModal","components_GenericModal","WelcomeGuide","Boolean","window","location","hostname","match","ReactDOM","render","Planner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9168319c.chunk.js","sourcesContent":["const handleInputChanges = function(event) {\n  let name = event.target.name;\n  let val = event.target.value;\n  this.setState({ [name]: val });\n};\n\nexport { handleInputChanges };\n","import moment from \"moment\";\nconst formatToDateString = date => moment(date).format(\"YYYY-MM-DD\");\nconst formatToTimeString = time => moment(time).format(\"HH:mm\");\n\nexport { formatToDateString, formatToTimeString };\n","import React, { Component } from \"react\";\nimport { Label, FormGroup } from \"reactstrap\";\n\nclass MultiDayPicker extends Component {\n  state = {\n    selectedDays: []\n  };\n\n  dayToggle = e => this.setState({ [e.target.name]: e.target.checked });\n\n  getSelectedDays = () => {\n    let selectedDays = [];\n    this.props.listOfDays.forEach(day => {\n      if (this.state[day.name]) {\n        selectedDays.push(day.id);\n      }\n    });\n    return selectedDays;\n  };\n\n  setDay = day => {\n    if (day) {\n      const index = parseInt(day, 10);\n      const selectedDay = this.props.listOfDays[index].name;\n      this.setState({ [selectedDay]: true });\n    }\n  };\n\n  renderDayButton = day => {\n    return (\n      <React.Fragment key={day.id}>\n        <input\n          type=\"checkbox\"\n          id={day.name}\n          name={day.name}\n          checked={this.state[day.name] || false}\n          onChange={this.dayToggle}\n          className=\"weekday\"\n        />\n        <label htmlFor={day.name}>{day.letter}</label>\n      </React.Fragment>\n    );\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state !== prevState) {\n      let daysOfWeek = this.getSelectedDays();\n      this.props.sendSelectedDays(daysOfWeek);\n    }\n    if (this.props.dayOfWeek !== prevProps.dayOfWeek) {\n      this.setDay(this.props.dayOfWeek);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"weekDays-selector\">\n        <Label style={{ paddingTop: \"0.2em\", paddingBottom: \"0.2em\" }}>\n          Select multiple days for a repeating event\n        </Label>\n\n        <FormGroup className=\"d-flex justify-content-center\">\n          {(this.props.listOfDays || []).map(day => this.renderDayButton(day))}\n        </FormGroup>\n        {this.props.valid && (\n          <small\n            className=\"text-danger\"\n            style={{ position: \"relative\", top: \"-1em\" }}\n          >\n            At least one day is required\n          </small>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default MultiDayPicker;\n","import React from \"react\";\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nconst ColorPicker = ({\n  colorList,\n  selectedColor,\n  defaultColor,\n  setSelectedColor\n}) => {\n  const populateColors = color => {\n    return (\n      <DropdownItem\n        key={color.id}\n        style={{\n          backgroundColor: color.color,\n          height: \"2em\",\n          marginBottom: \"0.15em\"\n        }}\n        onClick={() => setSelectedColor(color.id)}\n        className=\"colorBox-cursor\"\n      />\n    );\n  };\n\n  return (\n    <UncontrolledDropdown style={{ marginTop: \"1.5em\" }}>\n      <DropdownToggle\n        caret\n        style={{ backgroundColor: selectedColor || defaultColor }}\n      >\n        Event Color\n      </DropdownToggle>\n      <DropdownMenu\n        modifiers={{\n          setMaxHeight: {\n            enabled: true,\n            order: 890,\n            fn: data => {\n              return {\n                ...data,\n                styles: {\n                  ...data.styles,\n                  overflow: \"auto\",\n                  maxHeight: 160\n                }\n              };\n            }\n          }\n        }}\n      >\n        {(colorList || []).map(color => populateColors(color))}\n      </DropdownMenu>\n    </UncontrolledDropdown>\n  );\n};\n\nexport default ColorPicker;\n","export default [\n  { id: 0, name: \"Sunday\", short: \"Sun\", letter: \"S\" },\n  { id: 1, name: \"Monday\", short: \"Mon\", letter: \"M\" },\n  { id: 2, name: \"Tuesday\", short: \"Tue\", letter: \"T\" },\n  { id: 3, name: \"Wednesday\", short: \"Wed\", letter: \"W\" },\n  { id: 4, name: \"Thursday\", short: \"Thu\", letter: \"TH\" },\n  { id: 5, name: \"Friday\", short: \"Fri\", letter: \"F\" },\n  { id: 6, name: \"Saturday\", short: \"Sat\", letter: \"S\" }\n];\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport {\n  Input,\n  Label,\n  FormGroup,\n  ListGroup,\n  ListGroupItem,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  FormFeedback\n} from \"reactstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { handleInputChanges } from \"../utilities/inputUtilities\";\nimport { formatToTimeString } from \"../utilities/dateTimeFormatter\";\nimport MultiDayPicker from \"./MultiDayPicker\";\nimport ColorPicker from \"./ColorPicker\";\nimport daysOfWeek from \"../data/daysOfWeek\";\nimport \"../styles/react-datepicker.css\";\n\nclass AddToTemplateModal extends Component {\n  state = {\n    selectedDays: [],\n    inEditMode: false,\n    colorTypeId: \"9\",\n    dayOfWeek: \"\",\n    headerTextColor: \"white\",\n    defaultBgColor: \"#5484ed\",\n    modalHeaderColor: \"\",\n    title: \"\",\n    addEventTitle: \"Add to Your Schedule\",\n    startDate: moment(\"11012015\", \"MMDDYYYY\"),\n    startTime: moment(\"11012015 08:00\", \"MMDDYYYY HH:mm\"),\n    endTime: moment(\"11012015 10:00\", \"MMDDYYYY HH:mm\"),\n    validation: {\n      color: true,\n      pickedADay: false,\n      pleasePickADay: false,\n      title: true\n    }\n  };\n\n  populateDaysBox = dayOfWeek => {\n    return (\n      <option key={dayOfWeek.id} value={dayOfWeek.id}>\n        {dayOfWeek.name}\n      </option>\n    );\n  };\n\n  setSelectedDays = selectedDays => {\n    this.setState({ selectedDays }, () => {\n      if (selectedDays.length && this.state.validation.pleasePickADay)\n        this.validateInputs();\n    });\n  };\n\n  getFormData = () => {\n    let startTime = formatToTimeString(this.state.startTime);\n    let endTime = formatToTimeString(this.state.endTime);\n    let colorTypeId = parseInt(this.state.colorTypeId);\n    const newEventData = {\n      colorTypeId,\n      startTime,\n      endTime,\n      dayOfWeek: parseInt(this.state.dayOfWeek),\n      title: this.state.title\n    };\n    return newEventData;\n  };\n\n  handleSubmission = event => {\n    if (this.state.inEditMode) {\n      this.sendUpdatedEvent(this.props.selectedEvent, event);\n    } else {\n      let newEvents = this.state.selectedDays.map(day => {\n        let dayOfWeek = day;\n        let { colorTypeId, title, startTime, endTime } = event;\n        return { colorTypeId, title, startTime, endTime, dayOfWeek };\n      });\n      this.sendEventToCalendar(newEvents);\n    }\n  };\n\n  sendUpdatedEvent = (original, event) => {\n    this.resetValues();\n    this.props.showUpdatedEvent(original, event);\n  };\n\n  sendEventToCalendar = event => {\n    this.resetValues();\n    this.props.sendEventToCalendar(event);\n  };\n\n  resetValues = () => {\n    this.setState({\n      //colorTypeId: \"9\",\n      dayOfWeek: \"\",\n      //modalHeaderColor: \"\",\n      title: \"\",\n      inEditMode: false,\n      selectedDays: [],\n      validation: {\n        color: true,\n        pickedADay: false,\n        pleasePickADay: false,\n        title: true\n      }\n    });\n  };\n\n  closeHandler = () => {\n    this.props.onClose();\n    this.resetValues();\n  };\n\n  updateInputValue = handleInputChanges.bind(this);\n\n  setSelectedColor = colorTypeId => {\n    this.setState({ colorTypeId });\n    this.updateModalBgColor(colorTypeId);\n  };\n\n  handleDayChange = e => {\n    this.updateInputValue(e);\n    this.setState({\n      startDate: moment(\"11012015\", \"MMDDYYYY\").add(e.target.value, \"days\")\n    });\n  };\n\n  insertDeleteButton = () => {\n    if (this.state.inEditMode) {\n      return (\n        <button\n          className=\"btn btn-danger\"\n          onClick={() => {\n            this.props.delete(this.props.selectedEvent);\n            this.closeHandler();\n          }}\n        >\n          Delete\n        </button>\n      );\n    }\n  };\n\n  updateModalBgColor = id => {\n    let modalHeaderColor = this.props.colorIndex[id].color;\n    this.setState({ modalHeaderColor });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.start !== prevProps.start ||\n      this.props.end !== prevProps.end\n    ) {\n      this.setNewEventTime();\n    }\n    if (this.props.selectedEvent !== prevProps.selectedEvent) {\n      this.checkSelectedEvent();\n    }\n  }\n\n  setNewEventTime = () => {\n    this.setState({\n      startDate: moment(this.props.start),\n      startTime: moment(this.props.start),\n      endTime: moment(this.props.end),\n      dayOfWeek: moment(this.props.start).format(\"e\")\n    });\n  }\n\n  checkSelectedEvent = () => {\n    const {\n      colorTypeId,\n      dayOfWeek,\n      start,\n      end,\n      title\n    } = this.props.selectedEvent;\n    if (colorTypeId) {\n      this.updateModalBgColor(colorTypeId);\n      this.setState({\n        inEditMode: true,\n        title,\n        colorTypeId,\n        dayOfWeek,\n        startTime: moment(start),\n        endTime: moment(end)\n      });\n    }\n  }\n\n  renderDayPicker = () => {\n    if (!this.state.inEditMode) {\n      return (\n        <MultiDayPicker\n          dayOfWeek={this.state.dayOfWeek}\n          sendSelectedDays={this.setSelectedDays}\n          valid={this.state.validation.pleasePickADay}\n          listOfDays={daysOfWeek}\n        />\n      );\n    } else {\n      return (\n        <div className=\"form-group\" style={{ paddingBottom: \"0.1em\" }}>\n          <label>Day of Week</label>\n          <select\n            className=\"custom-select form-control mx-auto\"\n            name=\"dayOfWeek\"\n            value={this.state.dayOfWeek}\n            onChange={this.handleDayChange}\n          >\n            {daysOfWeek.map(day => this.populateDaysBox(day))}\n          </select>\n        </div>\n      );\n    }\n  };\n\n  validateInputs = () => {\n    const {\n      colorTypeId,\n      validation,\n      inEditMode,\n      selectedDays,\n      title\n    } = this.state;\n    title.length > 0 ? (validation.title = true) : (validation.title = false);\n    Number.isInteger(parseInt(colorTypeId))\n      ? (validation.color = true)\n      : (validation.color = false);\n    if (!inEditMode) {\n      if (selectedDays.length === 0) {\n        validation.pickedADay = false;\n        validation.pleasePickADay = true;\n      } else {\n        validation.pickedADay = true;\n        validation.pleasePickADay = false;\n      }\n    }\n    this.setState({ validation });\n  };\n\n  allValid = () => {\n    const { validation } = this.state;\n    if (this.state.inEditMode) {\n      if (validation.color) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if (\n      !this.state.inEditMode &&\n      validation.color &&\n      validation.pickedADay &&\n      validation.title\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  render() {\n    const { modalOpen } = this.props;\n    return (\n      <React.Fragment>\n        <Modal\n          style={{\n            maxWidth: 400,\n            minWidth: \"25em\",\n            position: \"relative\",\n            top: \"10\" // original 25\n          }}\n          isOpen={modalOpen}\n          toggle={this.closeHandler}\n          modalTransition={{ timeout: 10 }}\n          backdropTransition={{ timeout: 10 }}\n          //className={this.props.className} // this will auto-size the modal if enabled\n        >\n          <ModalHeader\n            style={{\n              position: \"relative\",\n              paddingTop: \"2em\",\n              width: \"100%\",\n              color: this.state.headerTextColor,\n              backgroundColor:\n                this.state.modalHeaderColor || this.state.defaultBgColor\n            }}\n          >\n            <div\n              className=\"text-center mx-auto\"\n              style={{\n                position: \"relative\",\n                top: \"-0.4em\",\n                marginBottom: \"-0.1em\",\n                float: \"right\"\n              }}\n            >\n              <big className=\"text-center\">\n                &nbsp;\n                {(this.state.inEditMode && \"Edit Your Saved Event\") ||\n                  this.state.addEventTitle}\n              </big>\n            </div>\n          </ModalHeader>\n          <ModalBody\n            style={{\n              position: \"relative\",\n              top: \"-0.5em\",\n              marginBottom: \"-0.9em\"\n            }}\n          >\n            <ListGroup>\n              <ListGroupItem className=\"border-0\">\n                <div\n                  className=\"mx-auto\"\n                  style={{ marginTop: \"0.6em\", paddingBottom: \"1.4em\" }}\n                >\n                  <FormGroup>\n                    <Label>Event Name</Label>\n                    <Input\n                      type=\"text\"\n                      name=\"title\"\n                      value={this.state.title}\n                      onChange={e => {\n                        this.setState({ [e.target.name]: e.target.value }, () =>\n                          this.validateInputs()\n                        );\n                      }}\n                      invalid={!this.state.validation.title}\n                    />\n                    <FormFeedback valid />\n                    <FormFeedback>This field is required</FormFeedback>\n                  </FormGroup>\n\n                  <FormGroup>\n                    <ColorPicker\n                      colorList={this.props.googleColors}\n                      selectedColor={this.state.modalHeaderColor}\n                      defaultColor={this.state.defaultBgColor}\n                      setSelectedColor={this.setSelectedColor}\n                    />\n                  </FormGroup>\n\n                  {this.renderDayPicker()}\n\n                  <div\n                    className=\"form-group\"\n                    style={{ minWidth: \"22em\", marginBottom: \"-0.0em\" }}\n                  >\n                    <label>Start/End Times</label>\n                    <div className=\"form-row\">\n                      <div\n                        className=\"col\"\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\n                      >\n                        <DatePicker\n                          selected={this.state.startTime}\n                          onChange={startTime => {\n                            if (startTime > this.state.endTime) {\n                              this.setState({\n                                startTime,\n                                endTime: moment(startTime).add(15, \"minutes\")\n                              });\n                            } else {\n                              this.setState({ startTime });\n                            }\n                          }}\n                          showTimeSelect\n                          showTimeSelectOnly\n                          timeIntervals={15}\n                          className=\"form-control text-center\"\n                          minTime={moment(\"11012015 05:00\", \"MMDDYYYY HH:mm\")}\n                          maxTime={moment(\"11012015 23:30\", \"MMDDYYYY HH:mm\")}\n                          dateFormat=\"LT\"\n                        />\n                      </div>\n                      <div\n                        className=\"col text-center\"\n                        style={{\n                          maxWidth: \"8%\",\n                          minWidth: \"1em\",\n                          marginTop: \"0.6em\"\n                        }}\n                      >\n                        <label>to</label>\n                      </div>\n                      <div\n                        className=\"col\"\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\n                      >\n                        <DatePicker\n                          selected={this.state.endTime}\n                          onChange={endTime => this.setState({ endTime })}\n                          showTimeSelect\n                          showTimeSelectOnly\n                          timeIntervals={15}\n                          minTime={moment(\n                            `11012015 ${moment(this.state.startTime)\n                              .add(15, \"minutes\")\n                              .format(\"HH:mm\")}`,\n                            \"MMDDYYYY HH:mm\"\n                          )}\n                          maxTime={moment(\"11012015 23:59\", \"MMDDYYYY HH:mm\")}\n                          className=\"form-control text-center\"\n                          dateFormat=\"LT\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  {this.insertDeleteButton()}\n                  &nbsp;&nbsp;\n                  <button\n                    className=\"btn btn-primary\"\n                    onClick={() => {\n                      this.validateInputs();\n                      if (this.allValid()) {\n                        const data = this.getFormData();\n                        this.handleSubmission(data);\n                      }\n                    }}\n                  >\n                    {(this.state.inEditMode && \"Update\") || \"Add\"}\n                  </button>\n                </div>\n              </ListGroupItem>\n            </ListGroup>\n          </ModalBody>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddToTemplateModal;\n","import React from \"react\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\n\nconst GenericModal = (props) => {\n  const { modalOpen, title, toggle, size } = props;\n  return (\n    <Modal isOpen={modalOpen} toggle={toggle} size={size || \"md\"}>\n      <ModalHeader>{title && title}</ModalHeader>\n      <ModalBody>\n        {props.children}\n        <button className=\"btn btn-light float-right\" onClick={toggle}>\n          Close\n        </button>\n      </ModalBody>\n    </Modal>\n  );\n}\n\nexport default GenericModal;\n","import React from \"react\";\n\nconst Guide = () => {\n  return (\n    <React.Fragment>\n      <strong>Creating Events</strong>\n      <ul>\n        <li>Use the (+) Button</li>\n        <li>Click on Desired Start Time</li>\n        <li>Click & Drag to Select Desired Time Slot</li>\n      </ul>\n      <strong>Modifying Events</strong>\n      <ul>\n        <li>Drag and Drop Events to Different Time Slots</li>\n        <li>Click to Edit Event Details</li>\n      </ul>\n    </React.Fragment>\n  );\n};\n\nexport default Guide;\n","export default [\n  {\n    color: \"#5484ed\",\n    id: 9\n  },\n  {\n    color: \"#a4bdfc\",\n    id: 1\n  },\n  {\n    color: \"#7ae7bf\",\n    id: 2\n  },\n  {\n    color: \"#dbadff\",\n    id: 3\n  },\n  {\n    color: \"#ff887c\",\n    id: 4\n  },\n  {\n    color: \"#fbd75b\",\n    id: 5\n  },\n  {\n    color: \"#ffb878\",\n    id: 6\n  },\n  {\n    color: \"#46d6db\",\n    id: 7\n  },\n  {\n    color: \"#e1e1e1\",\n    id: 8\n  },\n  {\n    color: \"#51b749\",\n    id: 10\n  },\n  {\n    color: \"#dc2127\",\n    id: 11\n  }\n];\n","import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport QuickCreateModal from \"./AddToTemplateModal\";\nimport Modal from \"./GenericModal\";\nimport Guide from \"./WelcomeGuide\";\nimport googleColors from \"../data/googleColors\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport \"../styles/app-styles.css\";\n\nconst DragAndDropCalendar = withDragAndDrop(Calendar);\nconst localizer = momentLocalizer(moment);\n\nconst colorIndex = (colorTypes) => {\n  // transform array of colors into one object (to be used as an index for O(1) lookup)\n  const colorIndex = {};\n  const colorKeys = Object.keys(colorTypes[0]).filter((key) => key !== \"id\");\n  for (const color of colorTypes) {\n    const colorData = {};\n    colorKeys.forEach((key) => {\n      colorData[key] = color[key];\n    });\n    colorIndex[color.id] = colorData;\n  }\n  return colorIndex;\n};\n\nclass App extends Component {\n  state = {\n    events: [],\n    colorIndex: colorIndex(googleColors),\n    quickCreateModal: false,\n    selectedEvent: {},\n    newStartTime: null,\n    newEndTime: null,\n    showWelcomeModal: false,\n  };\n\n  componentDidMount() {\n    this.checkIfNewVisitor();\n    this.loadSavedEvents();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.events !== prevState.events) {\n      this.saveEventsToLocal();\n    }\n  }\n\n  checkIfNewVisitor = () => {\n    const returningUser = localStorage.getItem(\"returningUser\");\n    if (!returningUser) {\n      localStorage.setItem(\"returningUser\", true);\n      this.setState({ showWelcomeModal: true });\n    }\n  };\n\n  loadSavedEvents = () => {\n    let savedData = localStorage.getItem(\"schedule\");\n    if (savedData) {\n      const parsed = JSON.parse(savedData);\n      const events = parsed.map((ev) => this.reformatEventData(ev));\n      this.setState({ events });\n    }\n  };\n\n  updateCalendarFromQuickCreate = (newEvents) => {\n    let newEventsArr = newEvents.map((ev) => this.reformatEventData(ev));\n    this.setState({\n      events: [...this.state.events, ...newEventsArr],\n      quickCreateModal: false,\n    });\n  };\n\n  reduceEventData = (events) => {\n    return events.map(\n      ({ startTime, endTime, colorTypeId, dayOfWeek, title }) => {\n        return { startTime, endTime, colorTypeId, dayOfWeek, title };\n      }\n    );\n  };\n\n  saveEventsToLocal = () => {\n    const events = this.reduceEventData(this.state.events);\n    const stringified = JSON.stringify(events);\n    localStorage.setItem(\"schedule\", stringified);\n  };\n\n  reformatEventData = (event) => {\n    let startDate = moment(\"11012015\", \"MMDDYYYY\")\n      .add(event.dayOfWeek, \"days\")\n      .format(\"YYYY-MM-DD\");\n    const colorData = this.state.colorIndex[event.colorTypeId];\n    let bgColor = colorData ? colorData.color : \"#4286f4\";\n    const updatedEvent = {\n      ...event,\n      start: new Date(`${startDate} ${event.startTime}`),\n      end: new Date(`${startDate} ${event.endTime}`),\n      bgColor,\n    };\n    return updatedEvent;\n  };\n\n  closeModalHandler = () => {\n    this.setState({\n      quickCreateModal: false,\n      selectedEvent: {},\n    });\n  };\n\n  quickRemoveFromCalendar = (event) => {\n    let events = this.state.events.filter((ev) => ev !== event);\n    this.setState({ events });\n  };\n\n  onEventMoveResize = ({ event, start, end }) => {\n    console.log(\"move\");\n    let startDate = moment(start).format(\"DD\");\n    let endDate = moment(end).format(\"DD\");\n    let endDateTime = end;\n    if (startDate !== endDate) {\n      endDateTime = moment(start)\n        .hours(23)\n        .minutes(59)\n        .toDate();\n    }\n    this.prepareMovedEventForUpdate(event, start, endDateTime);\n  };\n\n  prepareMovedEventForUpdate = (event, newStart, newEnd) => {\n    let dayOfWeek = moment(newStart).format(\"e\");\n    let startTime = moment(newStart).format(\"HH:mm\");\n    let endTime = moment(newEnd).format(\"HH:mm\");\n    const updatedEvent = {\n      ...event,\n      dayOfWeek,\n      startTime,\n      endTime,\n    };\n    this.renderMovedEvent(event, updatedEvent, newStart, newEnd);\n  };\n\n  renderUpdatedEvent = (original, event) => {\n    const { events } = this.state;\n    let reformatted = this.reformatEventData(event);\n    let remaining = events.filter((ev) => ev !== original);\n    this.setState({\n      events: [...remaining, reformatted],\n      quickCreateModal: false,\n      selectedEvent: {},\n    });\n  };\n\n  renderMovedEvent = (original, event, start, end) => {\n    const { events } = this.state;\n    const updatedEvent = { ...event, start, end };\n    const remaining = events.filter((ev) => ev !== original);\n    this.setState({\n      events: [...remaining, updatedEvent],\n    });\n  };\n\n  setEventCellStyling = (event) => {\n    let color = event.bgColor;\n    let style = {\n      background: `rgba(${parseInt(color.substring(1, 3), 16)}, ${parseInt(\n        color.substring(3, 5),\n        16\n      )}, ${parseInt(color.substring(5, 7), 16)}, 0.99)`,\n    };\n    return { style };\n  };\n\n  onCalendarEventSelection = (event) => {\n    this.setState({\n      selectedEvent: event,\n      quickCreateModal: true,\n    });\n  };\n\n  calendarSelectionHandler = (slotInfo) => {\n    let newEventStart = parseInt(moment(slotInfo.start).format(\"x\"));\n    let newEventEnd = parseInt(moment(slotInfo.end).format(\"x\"));\n\n    this.setState({\n      newEventStart,\n      newEventEnd,\n      quickCreateModal: true,\n    });\n  };\n\n  closeModal = () => this.setState({ showWelcomeModal: false });\n\n  render() {\n    let calDateTimeFormatting = {\n      dayFormat: (date, culture, localizer) =>\n        localizer.format(date, \"dddd\", culture),\n      timeGutterFormat: (date, culture, localizer) =>\n        localizer.format(date, \"h a\", culture),\n    };\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"form-row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-lg btn-danger\"\n              onClick={() => this.setState({ showWelcomeModal: true })}\n              style={{\n                position: \"relative\",\n                top: \"0.5em\",\n                height: \"2.45em\",\n                lineHeight: \"1.1em\",\n                width: \"2.45em\",\n                borderRadius: \"2.45em\",\n                margin: \"0 0em 0.8em 0.5em\",\n              }}\n            >\n              <big>?</big>\n            </button>\n          </div>\n          <div className=\"col text-center\">\n            <h2\n              className=\"text-center\"\n              style={{ position: \"relative\", bottom: \"-0.3em\" }}\n            >\n              Week Planner\n            </h2>\n          </div>\n          <div className=\"col text-right\">\n            <button\n              className=\"btn btn-lg btn-dark\"\n              onClick={() => this.setState({ quickCreateModal: true })}\n              style={{\n                position: \"relative\",\n                top: \"0.5em\",\n                borderRadius: \"1.8em\",\n                margin: \"0 1em 0.8em 0\",\n              }}\n            >\n              <i className=\"zmdi zmdi-plus text-white zmdi-hc-lg\" />\n            </button>\n          </div>\n        </div>\n        <DragAndDropCalendar\n          localizer={localizer}\n          selectable=\"ignoreEvents\"\n          events={this.state.events}\n          defaultDate={new Date(2015, 10, 1, 0)}\n          defaultView={\"week\"}\n          views={[\"week\"]}\n          step={15}\n          timeslots={4}\n          toolbar={false}\n          min={moment()\n            .hours(5)\n            .minutes(0)\n            .toDate()}\n          formats={calDateTimeFormatting}\n          onEventDrop={this.onEventMoveResize}\n          onEventResize={this.onEventMoveResize}\n          eventPropGetter={this.setEventCellStyling}\n          onSelectEvent={this.onCalendarEventSelection}\n          onSelectSlot={this.calendarSelectionHandler}\n        />\n        <QuickCreateModal\n          start={this.state.newEventStart}\n          selectedEvent={this.state.selectedEvent}\n          colorIndex={this.state.colorIndex}\n          end={this.state.newEventEnd}\n          modalOpen={this.state.quickCreateModal}\n          onClose={this.closeModalHandler}\n          googleColors={googleColors}\n          sendEventToCalendar={this.updateCalendarFromQuickCreate}\n          showUpdatedEvent={this.renderUpdatedEvent}\n          delete={this.quickRemoveFromCalendar}\n        />\n        <Modal\n          modalOpen={this.state.showWelcomeModal}\n          toggle={this.closeModal}\n          title=\"Using Schedule My Workweek\"\n          size=\"md\"\n        >\n          <Guide />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Planner from \"./components/Planner\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<Planner />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}